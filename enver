#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var util = require('util');
var program = require('commander');
var exec = require('child_process').exec;
var spawn = require('child_process').spawn;
var crypto = require('crypto');

var userHome = process.env.HOME;
var enverDir = userHome+"/.enver";
var enverDbName = "db"; 

function puts(error, stdout, stderr) { if (stderr) util.puts(stderr) }
function pbcopy(string) {
  exec("printf \""+string.replace(/"/g,'\\"')+"\" | pbcopy", puts);
}
function execute(cmd, cb, dir) {
  var execDir = dir || enverDir;
  exec(cmd, { cwd: execDir }, cb);
}

function savedb(newdb) {
  // crypting
  var aeskey = crypto.randomBytes(128).toString('base64');
  execute('echo "'+(escape(JSON.stringify(newdb)).replace(/%/g,'#'))+'" | openssl enc -aes-256-cbc -nosalt -pass pass:'+aeskey+' -out db', function(error, stdout, stderr) {
    if (stderr) console.log(stderr);
    execute("echo "+aeskey+" | openssl rsautl -encrypt -inkey id_rsa.pub -pubin -out key", function(error, stdout, stderr) {
      if (stderr) console.log(stderr);
    });
  });

}
function readdb(cb) {
  // decrypting
  execute("openssl rsautl -decrypt -inkey id_rsa -in key", function(error, stdout, stderr) {
    var decryptedkey = stdout.toString().replace(/\n/g,'');
    execute("printf "+decryptedkey+" | openssl enc -d -aes-256-cbc -nosalt -in db -pass stdin", function(error, stdout, stderr) {
      if (stderr) console.log(stderr);
      var decrypteddb = stdout;
      if (decrypteddb) {
        cb(JSON.parse(unescape(decrypteddb.replace(/#/g,'%'))));
      } else {
        cb({});
      }
    })
  });
}

/* object extend */
function extend(a, b, context, newobjs, aparent, aname, haveaparent) {
  if (a==b){ return a;}
  if (!b)  { return a;}

  var key, clean_context=false, return_sublevel=false,b_pos;
  if(!haveaparent){ aparent={'a':a}; aname='a'; }
  if(!context){clean_context=true;context=[];newobjs=[];}
  b_pos=context.indexOf(b);
  if( b_pos==-1 ) {context.push(b);newobjs.push([aparent, aname]);} else { return newobjs[b_pos][0][ newobjs[b_pos][1] ]; }

  for (key in b)
  {
   if(b.hasOwnProperty(key))
   { 
   if(typeof a[key] === 'undefined')
   {   
    if(typeof b[key] === 'object')
    {
     if( b[key] instanceof Array ) // http://javascript.crockford.com/remedial.html
      {a[key] = extend([], b[key],context,newobjs,a,key,true);}
     else if(b[key]===null)
      {a[key] = null;}
     else if( b[key] instanceof Date )
      { a[key]= new b[key].constructor();a[key].setTime(b[key].getTime());  }
     else
      { a[key] = extend({}, b[key],context,newobjs,a,key,true); /*a[key].constructor = b[key].constructor;  a[key].prototype = b[key].prototype;*/ }
    }
    else
    {  a[key] = b[key]; }
   }
   else if(typeof a[key] === 'object' && a[key] !== null)
   {  a[key] = extend(a[key], b[key],context,newobjs,a,key,true); /*a[key].constructor = b[key].constructor;  a[key].prototype = b[key].prototype;*/ }
   else  
   {  a[key] = b[key]; }
  }
  }
  if(clean_context) {context=null;newobjs=null;}
  if(!haveaparent)
  {
  aparent=null;
  return a;
  }
  return a;
}

function cmddump(obj, prefix) {
  var prefix = prefix || [];
  if (typeof obj != 'string') {
    for (subobj in obj) {
      var prefixCloned = prefix.slice(0);
      prefixCloned.push(subobj);
      cmddump(obj[subobj],prefixCloned);
    }
  } else {
    console.log(prefix.join('.'));
  }
}

function dump(obj, indent) {
  var indent = indent || '';
  if (typeof obj == 'string') {
    console.log('`list` command is used only to show the database tree, if you want to get a value use the `get` command.');
    return false;
  }
  for (subobj in obj) {
    if (typeof subobj == 'string')
      console.log(indent+subobj);
    if (typeof obj[subobj] != 'string')
      dump(obj[subobj],indent.replace('└',' ')+'└ ');
  }
}

program
  .command('init [dir]')
  .description('initialize enver')
  .action(function(dir) {
    path.exists(enverDir, function (exists) {
      if (!exists) {
        fs.mkdirSync(enverDir);
      }
      console.log('Generating RSA keys...');
      execute("openssl genrsa -out id_rsa 4096", function() {
        execute("openssl rsa -in id_rsa -out id_rsa.pub -outform PEM -pubout", function() {
          savedb({});
          console.log("enver initialized! type enver -h for help");
          path.exists(userHome+'/.oh-my-zsh', function(exists) {
            var readme = "https://github.com/fvianello/enver#readme";
            if (exists)
              console.log("Oh My ZSH found! You can activate autocomplete following the instructions here: "+readme);
            else 
              console.log("Oh My ZSH not installed! You can install it here: https://github.com/robbyrussell/oh-my-zsh \n and then activate autocomplete plugin following the instructions here: "+readme);
          })
        });
      });
    });
  });
if (path.existsSync(enverDir) && path.existsSync(enverDir+'/db')) {
  readdb(function(db) {
    program
      .version('0.1.2')
      .option('-c, --cmdlist', 'output commands list')

    program
      .command('add [keypath]')
      .description('add a new object')
      .action(function(keypath) {
        program.password('Value: ', function(value) {
          var splittedPath = keypath.split('.');
          var curPath = splittedPath[0];
          for (var i = 1; i <= splittedPath.length; i++) {
            if (!eval("db."+curPath)) {
              eval(util.format("db.%s = {}", curPath));
            }
            curPath += '.'+splittedPath[i];
          }
          eval('db.'+keypath+' = value;');
          process.stdin.destroy();
          savedb(db);
        });
      });

    program
      .command('import [file]')
      .description('import a json file')
      .action(function(file) {
        if (file && path.existsSync(file)) {
          var jsonfile = JSON.parse(fs.readFileSync(file, "utf8"));
          var newdb = extend(db,jsonfile);
          savedb(newdb);
        } else {
          console.log('file not found');
        }
      });

    program
      .command('delete [keypath]')
      .description('delete the specified object')
      .action(function(keypath) {
        try {
          eval(util.format("delete db.%s", keypath));
          savedb(db);
        } catch(e) {
          console.log('path not found');
        }
      });

    program
      .command('list [path]')
      .description('list all objects')
      .action(function(keypath) {
        if (keypath)
          dump(eval("db."+keypath));
        else
          dump(db);
      });

    program
      .command('get [path]')
      .description('retrieve the key and copy it to clipboard')
      .action(function(keypath) {
        if (keypath) {
          var retrievedKey;
          try {
             retrievedKey = eval("db."+keypath);
          } catch(e) { console.log('path not found'); return; }
          if (retrievedKey) {
            if (typeof retrievedKey == 'string') {
              pbcopy(retrievedKey);
            } else {
              console.log('invalid path');
            }
          } else {
            console.log('key not found');
          } 
        } else {
          console.log('please insert an object path');
        }
      });

    program
      .command('export [filepath]')
      .description('export the json database to file')
      .action(function(filepath) {
        if (filepath) {
          fs.writeFile(filepath, JSON.stringify(db), function (err) {
            if (err) console.log('directory not found');
          });
        } else {
          console.log('insert the file path');
        }
      });

    program.parse(process.argv);

    if (program.cmdlist) {
      cmddump(db);
      return;
    }
  });
} else {
  program
    .command('*')
    .action(function() {
      console.log('please run `enver init` to initialize enver')
    });
  program.parse(process.argv);
}